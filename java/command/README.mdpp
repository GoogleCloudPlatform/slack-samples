# Running a slash command for Slack on Google Cloud Platform with Java

This tutorial demonstrates how to build and deploy a [slash command for
Slack](https://api.slack.com/slash-commands) on [Google Cloud Platform](https://cloud.google.com/).

Slash commands provide a way to call external web services from a [Slack](https://slack.com/)
conversation. For example, the [Giphy
app](https://get.slack.help/hc/en-us/articles/204714258-Add-Giphy-search-to-Slack) can be run by
**/giphy** in a conversation.

!TOC

## Objectives

- Deploy a Java application to the [App Engine flexible environment][flexible].
- Create a [slash command for Slack](https://api.slack.com/slash-commands).
- Load tokens from the [Google Cloud Runtime Config
  API](https://cloud.google.com/deployment-manager/runtime-configurator/) 

[flexible]: https://cloud.google.com/appengine/docs/flexible/java/

## Costs

This tutorial uses billable components of Cloud Platform, including:

- Google App Engine Flexible Environment

Use the [Pricing Calculator][pricing] to generate a cost estimate based on your projected usage.

[pricing]: https://cloud.google.com/products/calculator

!INCLUDEURL "https://raw.githubusercontent.com/GoogleCloudPlatform/java-docs-samples/master/.github/templates/appengine-flexible-before-you-begin.mdpp"

1.  Create a [new Slack team](https://slack.com/), or use an team where you have
    permissions to add custom integrations.

!INCLUDE "../../.github/templates/getting-sample-code.mdpp"

The `java/command/1-start` directory contains a simple Hello World application, which you will
modify to support Slack slash commands.

    cd java/command/1-start

## Create a Slack app

Create a new Slack app by going to the [app management
page](https://api.slack.com/apps) and clicking the **Create new app** button.

1.  Give the app a name, such as "Hello World".
1.  Choose the Slack team for development and where you will eventually install it.

### Create a slash command

1.  Click the **Slash commands** feature in the navigation on the left-hand side.
1.  Click the **Create new command** button.
1.  Enter a command name, such as `/greet`.
1.  Enter `https://YOUR_PROJECT.appspot.com/hello` as your request URL, replacing `YOUR_PROJECT`
    with your Google Cloud project ID.
1.  Enter a short description, such as "Sends a greeting."

### Install the command to your team

1.  Go to the **Basic information** page using the left-hand navigation.
1.  Expand **Install your app to your team** and click the **Install app to team** button.

## Deploying your app

Your app requires some configuration. This sample uses the [RuntimeConfig
API](https://cloud.google.com/deployment-manager/runtime-configurator/) to store configuration
values, such as secret tokens.

### Create a configuration

Using the command-line [Google Cloud SDK](https://cloud.google.com/sdk/), create a new runtime
configuration.

    gcloud beta runtime-config configs create slack-samples-java

### Copy the verification token

To ensure that HTTP requests to your app originate from Slack, Slack provides a validation token.
You check that the token field of an incoming request matches the expected value.

1.  Select your app on the [app management page](https://api.slack.com/apps).
1.  Go to the **Basic information** page.
1.  Scroll to **App credentials** and copy the **Verification token** text.

### Add verification token to the configuration

Create a variable called `slack-token` in the runtime configuration. Use the Cloud SDK from the
command-line to add the variable.

    gcloud beta runtime-config configs variables set \
        slack-token "YOUR-TOKEN-VALUE" \
        --is-text --config-name slack-samples-java

Replace `YOUR-TOKEN-VALUE` with the verification token value you copied from the Slack app
management page.

### [Optional] Running locally

To run the application locally, use the Maven Spring Boot plugin.

    mvn clean spring-boot:run

View the app at http://localhost:8080.

Since Slack requires a public URL to send webhooks, you may wish to [use a service like ngrok to
test your Slack application locally](https://api.slack.com/tutorials/tunneling-with-ngrok).

### Deploying to App Engine

To deploy the app to App Engine, run

    mvn clean appengine:deploy

After the deploy finishes (can take up to 10 minutes), you can view your application at
https://YOUR_PROJECT.appspot.com, where YOUR_PROJECT is your Google Cloud project ID. You can see
the new version deployed on the App Engine section of the Google Cloud Console.

For a more detailed walkthrough, see the getting started guide for Java in the App Engine flexible
environment.

## Trying the slash command

When you run the slash command, Slack will send a request to your app and show the result.

-   Type `/greet` in your Slack team.

You should see the text `Hello, world.` in response.
